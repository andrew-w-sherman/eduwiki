The Cython programming language is a superset of Python with a foreign function interface for invoking C/C++ routines and the ability to declare the static type of subroutine parameters and results, local variables, and class attributes. It actually is a Python to C source code translator that integrates with the CPython interpreter on a low-level.


== Overview ==
Cython is a compiled language that generates CPython extension modules. These extension modules can then be loaded and used by regular Python code using the import statement. Cython is written in Python and works on Windows, Linux, and Mac OS X, producing source files compatible with CPython 2.4 through 3.4.
It works by producing a standard Python module. The difference from standard Python behavior however, is that the original code of the module is actually written in Python but is then translated into C. The resulting code is not completely independent, although it is fast, but rather makes many calls into the CPython interpreter and CPython standard libraries to perform actual work. This saved considerably on Cython's development time but requires a dependency on the Python interpreter and standard library for the module.
Despite the fact that most of the code is being output in C, at least a small stub loader written in interpreted Python is usually required (unless you want to create a loader in C, working with messy undocumented internals of CPython), but this is not a major problem due to the dependency on the Python interpreter.


== Hello World ==

Cython has an unusually involved hello world program because it interfaces with the Python C API and the distutils extension building facility. At least three files are required for a basic project:
A setup.py file to invoke the distutils build process that generates the extension module
A main python program to load the extension module
Cython source file(s)
The following code listings demonstrate the build and launch process.

These commands build and launch the program


== History ==
Cython is a derivative of the Pyrex language, and supports more features and optimizations than Pyrex.
Cython was forked from Pyrex in 2007 by developers of the Sage computer algebra package, because they were unhappy with Pyrex's limitations and could not get patches accepted by Pyrex's maintainer Greg Ewing, who envisioned a much smaller scope for his tool than the Sage developers had in mind. They then forked Pyrex as SageX. When they found people were downloading Sage just to get SageX, and developers of other packages (including Stefan Behnel, who maintains LXML) were also maintaining forks of Pyrex, SageX was split off the Sage project and merged with cython-lxml to become Cython.


== Example ==
Cython files have a .pyx extension. At its most basic, Cython code looks exactly like Python code. However, whereas standard Python is dynamically typed, in Cython, types can optionally be provided, allowing for improved performance, allowing loops to be converted into C loops where possible. For example:


== Static type declarations and Performance ==
A Cython program that implements the same algorithm as a corresponding Python program may consume fewer computing resources such as core memory and processing cycles due to differences between the CPython and Cython execution models. On the one hand, a basic Python program is loaded and executed by the CPython virtual machine, so both the runtime and the program itself consume computing resources. On the other hand, a Cython program is compiled to C code, which is further compiled to machine code, so the virtual machine is used only briefly when the program is loaded.
Cython employs:
Optimistic optimizations
Type inference (optional)
Low overhead in control structures
Low function call overhead
Since C is the intermediate language, performance will depend on the C compiler.


== Uses ==
Cython is particularly popular among scientific users of Python, where it has "the perfect audience" according to Python developer Guido van Rossum. Of particular note:
The free software Sage computer algebra system depends on Cython, both for performance and to interface with other libraries.
Significant parts of the scientific computing libraries SciPy, pandas and scikit-learn are written in Cython.
Cython's domain is not limited to just numerical computing. For example, the lxml XML toolkit is written mostly in Cython, and like its predecessor Pyrex, Cython is used to provide Python bindings for many C and C++ libraries like the messaging library ZeroMQ. Cython can also be used to develop parallel programs for multicore machines; this feature makes use of the OpenMP library.


== References ==


== External links ==
Official website