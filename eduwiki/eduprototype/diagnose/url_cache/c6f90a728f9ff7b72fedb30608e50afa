Not to be confused with Cython.
CPython is the default, most-widely used implementation of the Python programming language. It is written in C. In addition to CPython, there are other "production-quality" Python implementations: Jython, written in Java, PyPy, and IronPython, which is written for the Common Language Infrastructure. There are also several experimental implementations.
CPython is a bytecode interpreter. It has a foreign function interface with several languages including C, in which one must explicitly write bindings in a language other than Python.


== Supported platforms ==


=== Previously supported platforms ===
PEP 11 lists platforms which are not supported in CPython by Python Software Foundation. These platforms can still be supported by external ports. See below.
AtheOS (unsupported since 2.6)
BeOS (unsupported since 2.6)
DOS (unsupported since 2.0)
IRIX 4 (unsupported since 2.3)
Mac OS 9 (unsupported since 2.4)
MINIX (unsupported since 2.3)
Windows 3.x (unsupported since 2.0)
Windows 9x (unsupported since 2.6)
Windows NT4 (unsupported since 2.6)


=== External ports ===
These are ports not integrated to Python Software Foundation's official version of CPython, with links to its main development site. Ports often include additional modules for platform-specific functionalities, like graphics and sound API for PSP and SMS and camera API for S60.
Amiga: AmigaPython
AS/400: iSeriesPython
DOS using DJGPP: PythonD
PlayStation Portable: Stackless Python for PSP
Symbian OS: Python for S60
Windows CE/Pocket PC: Python Windows CE port


== Concurrency issues ==
A significant drawback to using CPython is the presence of a Global Interpreter Lock on each CPython interpreter process, which effectively disables concurrent Python threads within one process. To be truly concurrent in multitasking environment, separate CPython interpreter processes have to be run, which makes establishing communication between them a difficult task, though the multiprocessing module mitigates this somewhat. A lot of discussion took place whether to remove the GIL from CPython, even after the rejection of the free threading patches on CPython from Greg Stein which effectively replaced GIL with fine-grained locking. The rejection was mainly based on the overhead the patch inflicted to execution of single process code.


== Version history ==


== References ==